generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String        @id @default(cuid())
  name           String?
  email          String        @unique
  emailVerified  DateTime?
  image          String?
  role           String        @default("CUSTOMER")
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  tenantId       String?
  password       String?
  points         Int           @default(0)
  suspended      Boolean       @default(false)
  approvalStatus String        @default("ACTIVE")
  accounts       Account[]
  activities     Activity[]
  sessions       Session[]
  partnerTenants Tenant[]      @relation("PartnerUser")
  transactions   Transaction[]
  tenant         Tenant?       @relation(fields: [tenantId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([tenantId])
  @@index([role])
  @@index([suspended])
  @@index([approvalStatus])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Customer {
  id           String        @id @default(cuid())
  points       Int           @default(0)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  tenantId     String
  email        String        @unique
  name         String
  mobile       String
  tenant       Tenant        @relation(fields: [tenantId], references: [id])
  redemptions  Redemption[]
  transactions Transaction[]
  vouchers     Voucher[]

  @@index([tenantId])
}

model Tenant {
  id            String              @id @default(cuid())
  name          String
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  partnerUserId String
  mobile        String?
  customers     Customer[]
  rewards       Reward[]
  partnerUser   User                @relation("PartnerUser", fields: [partnerUserId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  pointsConfig  TenantPointsConfig?
  transactions  Transaction[]
  users         User[]
}

model Transaction {
  id         String   @id @default(cuid())
  amount     Float
  points     Int
  customerId String
  tenantId   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  status     String   @default("pending")
  type       String
  userId     String
  customer   Customer @relation(fields: [customerId], references: [id])
  tenant     Tenant   @relation(fields: [tenantId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([customerId])
  @@index([tenantId])
}

model Reward {
  id          String       @id @default(cuid())
  name        String
  description String
  points      Int
  createdAt   DateTime     @default(now())
  tenantId    String
  redemptions Redemption[]
  tenant      Tenant       @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  vouchers    Voucher[]

  @@index([tenantId])
}

model Redemption {
  id         String   @id @default(cuid())
  rewardId   String
  customerId String
  points     Int
  createdAt  DateTime @default(now())
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  reward     Reward   @relation(fields: [rewardId], references: [id], onDelete: Cascade)
  voucher    Voucher?

  @@index([rewardId])
  @@index([customerId])
}

model Voucher {
  id           String     @id @default(cuid())
  code         String     @unique
  redemptionId String     @unique
  customerId   String
  rewardId     String
  status       String     @default("active")
  usedAt       DateTime?
  expiresAt    DateTime?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  customer     Customer   @relation(fields: [customerId], references: [id], onDelete: Cascade)
  redemption   Redemption @relation(fields: [redemptionId], references: [id], onDelete: Cascade)
  reward       Reward     @relation(fields: [rewardId], references: [id], onDelete: Cascade)

  @@index([customerId])
  @@index([rewardId])
  @@index([status])
  @@index([expiresAt])
}

model TenantPointsConfig {
  id        String   @id @default(cuid())
  tenantId  String   @unique
  config    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
}

model Activity {
  id          String   @id @default(cuid())
  type        String
  description String?
  points      Int
  userId      String
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model SystemConfig {
  id                      String   @id @default(cuid())
  pointFaceValue          Float    @default(0.01) // £0.01 per point
  systemFixedCharge       Float    @default(0.001) // £0.001 per point
  systemVariableCharge    Float    @default(0.06) // 6% issuance margin
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  
  @@map("system_config")
}
